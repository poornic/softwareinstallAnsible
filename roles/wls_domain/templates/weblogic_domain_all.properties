# Domain
wls.admin.url=t3://{{ wls_admin_host }}:{{ wls_admin_port }}
wls.admin.username={{ app_user }}
wls.admin.password={{ weblogic_password }}
wls.admin.adminport={{ wls_admin_port }}
domain.home={{ oracle_base }}/domains
domain.name={{ domain_name }}
domain.production-mode={{ domain_production_mode }}
domain.JTAtimeout={{ domain_jta_timeout }}

{% if include_bo or include_fo %}
# ATG 'admin' user for WebLogic console
wls.atg.admin.user={{ wls_atg_admin_user }}
wls.atg.admin.password={{ wls_atg_admin_password }}
wls.atg.admin.description=ATG Dynamo Admin user
{% endif %}

# Machines
{% for machine in machines %}
wls.machines.machine{{ loop.index }}.machinename={{ machine.name }}
wls.machines.machine{{ loop.index }}.addr={{ machine.addr }}
wls.machines.machine{{ loop.index }}.type={{ machine.type }}
wls.machines.machine{{ loop.index }}.port={{ machine.port }}
{% endfor %}

# Clusters
{% for cluster in clusters %}
wls.clusters.atg.{{ cluster }}.clustername={{ cluster }}
{% endfor %}

# Managed servers
{% if include_bo %}
{% for managed_server in bo_managed_servers %}
wls.servers.{{ managed_server.name }}.servername={{ managed_server.name }}
wls.servers.{{ managed_server.name }}.listenaddr={{ managed_server.listenaddr }}
wls.servers.{{ managed_server.name }}.listenport={{ managed_server.listenport }}
wls.servers.{{ managed_server.name }}.cluster={{ bo_cluster }}
wls.servers.{{ managed_server.name }}.machine={{ managed_server.machine }}
wls.servers.{{ managed_server.name }}.datadir={{ atg_data_dir }}
wls.servers.{{ managed_server.name }}.appname=
wls.servers.{{ managed_server.name }}.classpath={{ atg_class_path }}
wls.servers.{{ managed_server.name }}.startargs={{ bo_startup_args }} -Datg.dynamo.server.name={{ managed_server.name }} -Dweblogic.Stdout={{ domain_home }}/servers/{{ managed_server.name }}/logs/{{ managed_server.name }}.out -Xloggc:{{ domain_home }}/servers/{{ managed_server.name }}/logs/{{ managed_server.name }}_gc.log
{% endfor %}
{% endif %}

{% if include_fo %}
{% for managed_server in fo_managed_servers %}
wls.servers.{{ managed_server.name }}.servername={{ managed_server.name }}
wls.servers.{{ managed_server.name }}.listenaddr={{ managed_server.listenaddr }}
wls.servers.{{ managed_server.name }}.listenport={{ managed_server.listenport }}
wls.servers.{{ managed_server.name }}.cluster={{ live_cluster }}
wls.servers.{{ managed_server.name }}.machine={{ managed_server.machine }}
wls.servers.{{ managed_server.name }}.datadir={{ atg_data_dir }}
wls.servers.{{ managed_server.name }}.appname=
wls.servers.{{ managed_server.name }}.classpath={{ atg_class_path }}
wls.servers.{{ managed_server.name }}.startargs={{ fo_startup_args }} -Datg.dynamo.server.name={{ managed_server.name }} -Dweblogic.Stdout={{ domain_home }}/servers/{{ managed_server.name }}/logs/{{ managed_server.name }}.out {% if env_type == "test" %}-Xloggc:{{ domain_home }}/servers/{{ managed_server.name }}/logs/{{ managed_server.name }}_gc.log{% endif %}
{% endfor %}

{% for managed_server in ca_managed_servers %}
wls.servers.{{ managed_server.name }}.servername={{ managed_server.name }}
wls.servers.{{ managed_server.name }}.listenaddr={{ managed_server.listenaddr}}
wls.servers.{{ managed_server.name }}.listenport={{ managed_server.listenport }}
wls.servers.{{ managed_server.name }}.cluster={{ bcc_cluster }}
wls.servers.{{ managed_server.name }}.machine={{ managed_server.machine }}
wls.servers.{{ managed_server.name }}.datadir={{ atg_data_dir }}
wls.servers.{{ managed_server.name }}.appname=
wls.servers.{{ managed_server.name }}.classpath={{ atg_class_path }}
wls.servers.{{ managed_server.name }}.startargs={{ ca_startup_args }} -Datg.dynamo.server.name={{ managed_server.name }} -Dweblogic.Stdout={{ domain_home }}/servers/{{ managed_server.name }}/logs/{{ managed_server.name }}.out {% if env_type == "test" %}-Xloggc:{{ domain_home }}/servers/{{ managed_server.name }}/logs/{{ managed_server.name }}_gc.log{% endif %}
{% endfor %}

{% for managed_server in tr_managed_servers %}
wls.servers.{{ managed_server.name }}.servername={{ managed_server.name }}
wls.servers.{{ managed_server.name }}.listenaddr={{ managed_server.listenaddr}}
wls.servers.{{ managed_server.name }}.listenport={{ managed_server.listenport }}
wls.servers.{{ managed_server.name }}.cluster={{ traveller_cluster }}
wls.servers.{{ managed_server.name }}.machine={{ managed_server.machine }}
wls.servers.{{ managed_server.name }}.datadir={{ atg_data_dir }}
wls.servers.{{ managed_server.name }}.appname=
wls.servers.{{ managed_server.name }}.classpath={{ atg_class_path }}
wls.servers.{{ managed_server.name }}.startargs={{ tr_startup_args }} -Datg.dynamo.server.name={{ managed_server.name }} -Dweblogic.Stdout={{ domain_home }}/servers/{{ managed_server.name }}/logs/{{ managed_server.name }}.out {% if env_type == "test" %}-Xloggc:{{ domain_home }}/servers/{{ managed_server.name }}/logs/{{ managed_server.name }}_gc.log{% endif %}
{% endfor %}
{% endif %}

{% if include_coherence %}
wls.servers.mbeanserver1.servername=MBeanServer-001
wls.servers.mbeanserver1.listenaddr={{ coh_mbean_svr_addr }}
wls.servers.mbeanserver1.listenport={{ coh_mbean_svr_port }}
wls.servers.mbeanserver1.cluster={{ coh_wls_cluster }}
wls.servers.mbeanserver1.machine={{ coh_mbean_svr_machine }}
wls.servers.mbeanserver1.startargs={{ coh_mbean_startup_args }}
wls.servers.mbeanserver1.classpath=

wls.servers.webserver1.servername=nova-datagrid-web-1
wls.servers.webserver1.listenaddr={{ coh_web_svr_addr }}
wls.servers.webserver1.listenport={{ coh_web_svr_port }}
wls.servers.webserver1.cluster={{ coh_web_cluster }}
wls.servers.webserver1.machine={{ coh_web_svr_machine }}
wls.servers.webserver1.startargs={{ coh_web_startup_args }}
wls.servers.webserver1.classpath=
{% endif %}


{% if include_bo or include_fo %}
# Database JDBC config
{% for data_source in data_sources %}
wls.jdbc.{{ data_source.name }}.jdbcname={{ data_source.name }}
wls.jdbc.{{ data_source.name }}.target={{ data_source.target }}
wls.jdbc.{{ data_source.name }}.jndi={{ data_source.jndi }}
wls.jdbc.{{ data_source.name }}.driver={{ data_source.driver }}
wls.jdbc.{{ data_source.name }}.url={{ data_source.url }}
wls.jdbc.{{ data_source.name }}.user={{ data_source.user }}
wls.jdbc.{{ data_source.name }}.password={{ data_source.password }}
wls.jdbc.{{ data_source.name }}.maxcapacity={{ data_source.maxcapacity }}
{% endfor %}
{% endif %}

{% if include_fo %}
# SNMP config - frontoffice only
snmp.server01.srvname=AdminServer
snmp.server01.snmpname=SNMP-AdminServer
snmp.server01.SNMPPort=2001
snmp.server01.MasterAgentXPort=3001
{% for managed_server in fo_managed_servers %}
snmp.server1{{ loop.index }}.srvname={{ managed_server.name }}
snmp.server1{{ loop.index }}.snmpname=SNMP-{{ managed_server.name }}
snmp.server1{{ loop.index }}.SNMPPort=210{{ loop.index }}
snmp.server1{{ loop.index }}.MasterAgentXPort=310{{ loop.index }}
{% endfor %}
{% for managed_server in ca_managed_servers %}
snmp.server2{{ loop.index }}.srvname={{ managed_server.name }}
snmp.server2{{ loop.index }}.snmpname=SNMP-{{ managed_server.name }}
snmp.server2{{ loop.index }}.SNMPPort=210{{ loop.index }}
snmp.server2{{ loop.index }}.MasterAgentXPort=310{{ loop.index }}
{% endfor %}
{% for managed_server in tr_managed_servers %}
snmp.server3{{ loop.index }}.srvname={{ managed_server.name }}
snmp.server3{{ loop.index }}.snmpname=SNMP-{{ managed_server.name }}
snmp.server3{{ loop.index }}.SNMPPort=210{{ loop.index }}
snmp.server3{{ loop.index }}.MasterAgentXPort=310{{ loop.index }}
{% endfor %}
{% endif %}

{% if include_bo %}
# HornetQ - backoffice only
wls.hornetq.modulename={{ hq_modulename }}
wls.hornetq.servername={{ hq_servername }}
wls.hornetq.initial-context-factory={{ hq_init_context_factory }}
wls.hornetq.target={{ bo_cluster }}
wls.hornetq.connection-url={{ hq_conn_url }}
wls.hornetq.factory-name={{ hq_conn_factory_name }}
wls.hornetq.factory-local-jndi={{ hq_conn_factory_local_jndi }}
wls.hornetq.factory-remote-jndi={{ hq_conn_factory_remote_jndi }}
{% for hq_dest in hq_destinations %}
wls.hornetqdest.{{ loop.index }}.name={{ hq_dest.name }}
wls.hornetqdest.{{ loop.index }}.local-jndi={{ hq_dest.local_jndi_name }}
wls.hornetqdest.{{ loop.index }}.remote_jndi={{ hq_dest.remote_jndi_name }}
{% endfor %}
{% endif %}

{% if include_coherence %}
# Coherence cluster
coh.clusters.coh_cluster.clustername={{ coh_cluster }}
coh.clusters.coh_cluster.wls-clustername={{ coh_wls_cluster }}
coh.clusters.coh_cluster.unicast-port={{ coh_wka_port }}

# Coherence MBean server
# Note: Associated WebLogic server must be created
coh.servers.mbeanserver1.servername=MBeanServer-001
coh.servers.mbeanserver1.coherence-cluster={{ coh_cluster }}
coh.servers.mbeanserver1.localstorage-enabled=false

# Coherence cluster storage enabled servers
coh.dynaservers.machines={{ coh_machines_list }}
{% for coh_machine in coh_machines %}
coh.dynaservers.{{ coh_machine.name }}.wls-listenaddr={{ coh_machine.addr }}
{% endfor %}
coh.dynaservers.count=2
coh.dynaservers.prefix={{ wls_coh_server_prefix }}
coh.dynaservers.listenaddr-start={{ wls_coh_port_start }}
coh.dynaservers.listenaddr-step=1
coh.dynaservers.wls-cluster={{ coh_wls_cluster }}
coh.dynaservers.coh-cluster={{ coh_cluster }}
coh.dynaservers.startargs={{ coh_jvm_mem_args }} -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+PrintGCDateStamps -XX:+HeapDumpOnOutOfMemoryError -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djavax.management.builder.initial=weblogic.management.jmx.mbeanserver.WLSMBeanServerBuilder -Dtangosol.coherence.management=all -Dtangosol.coherence.management.remote=true -Dtangosol.coherence.log=slf4j -Dtangosol.coherence.management.extendedmbeanname=true
coh.dynaservers.classpath=
{% endif %}

# Log file rotation config
log.FileCount=10
# Note the WebLogic file size property is called 'FileMinSize'
log.FileMinSize=5000
log.RotationType=bySize
log.RotateLogOnStartup=true
log.NumberOfFilesLimited=true
